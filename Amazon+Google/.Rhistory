ar3 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 3)
ar4 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 4)
ar5 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 5)
ar6 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 6)
# AdaHedge + Hedge
loss.matrix <- cbind(ar1$piAdapt[,2] - ar1$piAdapt[,1], ar2$piAdapt[,2] - ar2$piAdapt[,1], ar3$piAdapt[,2] - ar3$piAdapt[,1],
ar4$piAdapt[,2] - ar4$piAdapt[,1], ar5$piAdapt[,2] - ar5$piAdapt[,1], ar6$piAdapt[,2] - ar6$piAdapt[,1])
adahedAlg <- adahedge(loss.matrix)
N <- NROW(adahedAlg$weights)
K <- NCOL(adahedAlg$weights)
t <- NROW(googl_lag)-N-1
pi.m <- pi.wm <- matrix(NA, N, 2)
m.cov <- rep(NA, N)
wm.cov <- rep(NA, N)
set.seed(1)
for(i in 1:N){
conf.t <- rbind(ar1$piAdapt[i,], ar2$piAdapt[i,], ar3$piAdapt[i,], ar4$piAdapt[i,], ar5$piAdapt[i,], ar6$piAdapt[i,])
maj.int <- majority_vote(conf.t, w=adahedAlg$weights[i,], 0.5)
wmaj.int <- majority_vote(conf.t, w=adahedAlg$weights[i,], runif(1, 0.5, 1))
pi.m[i,] <- maj.int
pi.wm[i,] <- wmaj.int
m.cov[i] <- I(maj.int[1] <= googl_y[i+t] && googl_y[i+t] <= maj.int[2])
wm.cov[i] <- I(wmaj.int[1] <= googl_y[i+t] && googl_y[i+t] <= wmaj.int[2])
if(i %% 100 == 0){
print(sprintf("Done %i time steps",i))
}
}
m.cov[is.na(m.cov)] <- F
wm.cov[is.na(wm.cov)] <- F
mean(m.cov)
mean(wm.cov)
data.plot_a <- data.frame(
iter = 1:N,
local.m = stats::filter(m.cov, rep(1/100, 100)),
local.wm = stats::filter(wm.cov, rep(1/100, 100))
)
pM1<-ggplot(data.plot_a, aes(x = iter)) +
geom_line(aes(y = local.m, color = "Weighted Majority"), linetype = "solid") +
geom_line(aes(y = local.wm, color = "Rand. Weighted Majority"), linetype = "dashed") +
geom_hline(yintercept = 0.80, color = "black", linetype = "dashed") +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Local Level Coverage", color = "") +
scale_color_manual(values = c("Weighted Majority" = "forestgreen", "Rand. Weighted Majority" = "orange", "Bern 0.9" = "orange")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(0.5,1.01)
pM1
data.plot_ada <- data.frame(
"iter" <- 1:N,
"lo" <- pi.m[,1],
"up" <- pi.m[,2],
"ys" <- googl_y[100:length(googl_y)]
)
pM1a<-ggplot(data.plot_ada, aes(x = iter)) +
geom_line(aes(y = lo), color = "orange", linetype = "solid") +
geom_line(aes(y = up), color = "orange", linetype = "solid") +
geom_line(aes(y = ys), color = "black", linetype = "solid") +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Amazon stock price", color = "") +
theme_minimal()
pM1a
# hedge
hedAlg <- hedge(loss.matrix, eta = 0.01)
N <- NROW(hedAlg$weights)
K <- NCOL(hedAlg$weights)
t <- NROW(googl_lag)-N-1
pi.m <- pi.wm <- matrix(NA, N, 2)
m.cov <- rep(NA, N)
wm.cov <- rep(NA, N)
set.seed(1)
for(i in 1:N){
conf.t <- rbind(ar1$piAdapt[i,], ar2$piAdapt[i,], ar3$piAdapt[i,], ar4$piAdapt[i,], ar5$piAdapt[i,], ar6$piAdapt[i,])
maj.int <- majority_vote(conf.t, w=hedAlg$weights[i,], 0.5)
wmaj.int <- majority_vote(conf.t, w=hedAlg$weights[i,], runif(1, 0.5, 1))
pi.m[i,] <- maj.int
pi.wm[i,] <- wmaj.int
m.cov[i] <- I(maj.int[1] <= googl_y[i+t] && googl_y[i+t] <= maj.int[2])
wm.cov[i] <- I(wmaj.int[1] <= googl_y[i+t] && googl_y[i+t] <= wmaj.int[2])
if(i %% 100 == 0){
print(sprintf("Done %i time steps",i))
}
}
m.cov[is.na(m.cov)] <- F
wm.cov[is.na(wm.cov)] <- F
mean(m.cov)
mean(wm.cov)
data.plot_b <- data.frame(
iter = 1:N,
local.m = stats::filter(m.cov, rep(1/100, 100)),
local.wm = stats::filter(wm.cov, rep(1/100, 100))
)
pM2<-ggplot(data.plot_b, aes(x = iter)) +
geom_line(aes(y = local.m, color = "Weighted Majority"), linetype = "solid") +
geom_line(aes(y = local.wm, color = "Rand. Weighted Majority"), linetype = "dashed") +
geom_hline(yintercept = 0.80, color = "black", linetype = "dashed") +
labs(title = expression(eta==0.01), x = "Iter", y = "Local Level Coverage", color = "") +
scale_color_manual(values = c("Weighted Majority" = "forestgreen", "Rand. Weighted Majority" = "orange", "Bern 0.9" = "orange")) +
theme_minimal() + theme(legend.position = "bottom")+
ylim(0.5,1.01)
pM2
data.plot_hed <- data.frame(
"iter" <- 1:N,
"lo" <- pi.m[,1],
"up" <- pi.m[,2],
"ys" <- googl_y[100:length(googl_y)]
)
pM2a<-ggplot(data.plot_hed, aes(x = iter)) +
geom_line(aes(y = lo), color = "orange", linetype = "solid") +
geom_line(aes(y = up), color = "orange", linetype = "solid") +
geom_line(aes(y = ys), color = "black", linetype = "solid") +
labs(title = expression(eta==0.01), x = "Iter", y = "Amazon stock price", color = "") +
theme_minimal()
row1 <- grid.arrange(pM1, pM2, ncol = 2)
row2 <- grid.arrange(pM1a, pM2a, ncol = 2)
grid.arrange(row1, row2)
# weights
data.plot1 <- as.matrix(adahedAlg$weights)
colnames(data.plot1) <- c("ar1", "ar2", "ar3", "ar4", "ar5", "ar6")
data.plot1 <- as.data.frame(data.plot1)
data.plot1$iter <- 1:nrow(data.plot1)
p1<-ggplot(data.plot1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Weights", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom")
p1
data.plot2 <- as.matrix(hedAlg$weights)
colnames(data.plot2) <- c("ar1", "ar2", "ar3", "ar4", "ar5", "ar6")
data.plot2 <- as.data.frame(data.plot2)
data.plot2$iter <- 1:nrow(data.plot2)
p2<-ggplot(data.plot2, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash") +
labs(title = expression(eta == 0.01), x = "Iter", y = "Weights", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(0,1)
p2
# cors
cors_ar <- matrix(NA, nrow = length(ar1$AdaptErr), ncol = 6)
for(i in 20:length(ar1$AdaptErr)){
cors_ar[i,1] <- cor(ar1$AdaptErr[1:i], adahedAlg$weights[1:i,1])
cors_ar[i,2] <- cor(ar2$AdaptErr[1:i], adahedAlg$weights[1:i,2])
cors_ar[i,3] <- cor(ar3$AdaptErr[1:i], adahedAlg$weights[1:i,3])
cors_ar[i,4] <- cor(ar4$AdaptErr[1:i], adahedAlg$weights[1:i,4])
cors_ar[i,5] <- cor(ar5$AdaptErr[1:i], adahedAlg$weights[1:i,5])
cors_ar[i,6] <- cor(ar6$AdaptErr[1:i], adahedAlg$weights[1:i,6])
}
data.cor1 <- data.frame(
ar1 = cors_ar[,1],
ar2 = cors_ar[,2],
ar3 = cors_ar[,3],
ar4 = cors_ar[,4],
ar5 = cors_ar[,5],
ar6 = cors_ar[,6],
iter = 1:NROW(cors_ar)
)
p_cor1 <- ggplot(data.cor1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste("Adaptive ",eta)), x = "Iter", y = "correlation", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(-0.3,0.3)
cors_ar <- matrix(NA, nrow = length(ar1$AdaptErr), ncol = 6)
for(i in 20:length(ar1$AdaptErr)){
cors_ar[i,1] <- cor(ar1$AdaptErr[1:i], hedAlg$weights[1:i,1])
cors_ar[i,2] <- cor(ar2$AdaptErr[1:i], hedAlg$weights[1:i,2])
cors_ar[i,3] <- cor(ar3$AdaptErr[1:i], hedAlg$weights[1:i,3])
cors_ar[i,4] <- cor(ar4$AdaptErr[1:i], hedAlg$weights[1:i,4])
cors_ar[i,5] <- cor(ar5$AdaptErr[1:i], hedAlg$weights[1:i,5])
cors_ar[i,6] <- cor(ar6$AdaptErr[1:i], hedAlg$weights[1:i,6])
}
data.cor2 <- data.frame(
ar1 = cors_ar[,1],
ar2 = cors_ar[,2],
ar3 = cors_ar[,3],
ar4 = cors_ar[,4],
ar5 = cors_ar[,5],
ar6 = cors_ar[,6],
iter = 1:NROW(cors_ar)
)
p_cor2 <- ggplot(data.cor1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste(eta==0.01)), x = "Iter", y = "correlation", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(-0.5,0.5)
# sums of covs
sum_covs_ar <- rep(NA, length(ar1$AdaptErr))
for(i in 20:length(ar1$AdaptErr)){
sum_covs_ar[i] <- mean(ar1$AdaptErr[1:i]*adahedAlg$weights[1:i,1]) + mean(ar2$AdaptErr[1:i]*adahedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i]*adahedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i]*adahedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i]*adahedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i]*adahedAlg$weights[1:i,6]) -
(mean(ar1$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,1]) +  mean(ar2$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,6]))
}
data.cov1 <- data.frame(
sum_covs = sum_covs_ar,
iter = 1:NROW(cors_ar)
)
p_cov1 <- ggplot(data.cov1, aes(x = iter)) +
geom_line(aes(y = sum_covs), linetype = "solid", size = .75) +
labs(title = expression(paste("Adaptive ",eta)), x = "Iter", y = "Sum of covariances", color = "") +
theme_minimal() + theme(legend.position = "bottom") + ylim(-1, 1)
sum_covs_ar <- rep(NA, length(ar1$AdaptErr))
for(i in 20:length(ar1$AdaptErr)){
sum_covs_ar[i] <- mean(ar1$AdaptErr[1:i]*hedAlg$weights[1:i,1]) + mean(ar2$AdaptErr[1:i]*hedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i]*hedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i]*hedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i]*hedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i]*hedAlg$weights[1:i,6]) -
(mean(ar1$AdaptErr[1:i])*mean(hedAlg$weights[1:i,1]) +  mean(ar2$AdaptErr[1:i])*mean(hedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i])*mean(hedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i])*mean(hedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i])*mean(hedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i])*mean(hedAlg$weights[1:i,6]))
}
data.cov2 <- data.frame(
sum_covs = sum_covs_ar,
iter = 1:NROW(cors_ar)
)
p_cov2 <- ggplot(data.cov2, aes(x = iter)) +
geom_line(aes(y = sum_covs), linetype = "solid", size = .75) +
labs(title = expression(eta==0.01), x = "Iter", y = "Sum of covariances", color = "") +
theme_minimal() + theme(legend.position = "bottom") + ylim(-1, 1)
row1 <- grid.arrange(pM1, p1, p_cov1, pM1a, ncol = 4)
row2 <- grid.arrange(pM2, p2, p_cov2, pM2a, ncol = 4)
grid.arrange(row1, row2)
rm(list = ls())
library(glmnet)
library(ggplot2)
library(dplyr)
library(gridExtra)
source("utils_amz.R")
# load data
dija <- read.csv("djia.csv", stringsAsFactors = T)
googl <- dija[dija$Name=="GOOGL",]
googl$Date <- as.Date(googl$Date)
googl_lag <- embed(googl$Open, 6)
googl_y <- googl$Open[7:length(googl$Open)]
### runAr
runAR_k <- function(Y,X,alpha,nu,q,k,tinit=100){
# Y: outcome
# X: covariates
# alpha: conf.level
# nu: learning parameter
# q: initial quantiles
T <- length(Y)
## Initialize data storage variables
qTrajectory <- rep(NA, T-tinit+1)
adaptErrSeq <- rep(NA, T-tinit+1)
BT          <- rep(NA, T-tinit+1)
piAdapt     <- matrix(NA, nrow = T-tinit+1, ncol=2)
qT          <- q
nuT         <- nu
for(t in tinit:T){
newX <- X[1:(t-1),1:k]
newY <- Y[1:(t-1)]
### Fit regression (AR) on training setting
lmfit <- lm(log(newY) ~ log(newX))
### Compute conformity score on calibration set and on new data example
predt <- exp(as.numeric(c(1, log(X[t,1:k]))%*%lmfit$coef))
### Compute errt for both methods
adaptErrSeq[t-tinit+1] <- 1 - I(abs(predt - Y[t]) <= qT)
piAdapt[t-tinit+1,]    <- c(predt - qT, predt + qT)
BT[t-tinit+1]          <- abs(predt - Y[t])
## update qT
qTrajectory[t-tinit+1] <- qT
if(t > 2*tinit){
nuT <- 0.1*max(BT[(t-tinit-tinit):(t-tinit)])
}
qT <- qT + nuT*(adaptErrSeq[t-tinit+1]-alpha)
if(t %% 100 == 0){
print(sprintf("Done %i time steps",t))
}
}
return(list(q_t=qTrajectory,
AdaptErr=adaptErrSeq,
piAdapt=piAdapt))
}
ar1 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 1)
ar2 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 2)
ar3 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 3)
ar4 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 4)
ar5 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 5)
ar6 <- runAR_k(googl_y, googl_lag, 0.1, q = 0, nu = 2, k = 6)
# AdaHedge + Hedge
loss.matrix <- cbind(ar1$piAdapt[,2] - ar1$piAdapt[,1], ar2$piAdapt[,2] - ar2$piAdapt[,1], ar3$piAdapt[,2] - ar3$piAdapt[,1],
ar4$piAdapt[,2] - ar4$piAdapt[,1], ar5$piAdapt[,2] - ar5$piAdapt[,1], ar6$piAdapt[,2] - ar6$piAdapt[,1])
adahedAlg <- adahedge(loss.matrix)
N <- NROW(adahedAlg$weights)
K <- NCOL(adahedAlg$weights)
t <- NROW(googl_lag)-N-1
pi.m <- pi.wm <- matrix(NA, N, 2)
m.cov <- rep(NA, N)
wm.cov <- rep(NA, N)
set.seed(1)
for(i in 1:N){
conf.t <- rbind(ar1$piAdapt[i,], ar2$piAdapt[i,], ar3$piAdapt[i,], ar4$piAdapt[i,], ar5$piAdapt[i,], ar6$piAdapt[i,])
maj.int <- majority_vote(conf.t, w=adahedAlg$weights[i,], 0.5)
wmaj.int <- majority_vote(conf.t, w=adahedAlg$weights[i,], runif(1, 0.5, 1))
pi.m[i,] <- maj.int
pi.wm[i,] <- wmaj.int
m.cov[i] <- I(maj.int[1] <= googl_y[i+t] && googl_y[i+t] <= maj.int[2])
wm.cov[i] <- I(wmaj.int[1] <= googl_y[i+t] && googl_y[i+t] <= wmaj.int[2])
if(i %% 100 == 0){
print(sprintf("Done %i time steps",i))
}
}
m.cov[is.na(m.cov)] <- F
wm.cov[is.na(wm.cov)] <- F
mean(m.cov)
mean(wm.cov)
data.plot_a <- data.frame(
iter = 1:N,
local.m = stats::filter(m.cov, rep(1/100, 100)),
local.wm = stats::filter(wm.cov, rep(1/100, 100))
)
pM1<-ggplot(data.plot_a, aes(x = iter)) +
geom_line(aes(y = local.m, color = "Weighted Majority"), linetype = "solid") +
geom_line(aes(y = local.wm, color = "Rand. Weighted Majority"), linetype = "dashed") +
geom_hline(yintercept = 0.80, color = "black", linetype = "dashed") +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Local Level Coverage", color = "") +
scale_color_manual(values = c("Weighted Majority" = "forestgreen", "Rand. Weighted Majority" = "orange", "Bern 0.9" = "orange")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(0.5,1.01)
pM1
data.plot_ada <- data.frame(
"iter" <- 1:N,
"lo" <- pi.m[,1],
"up" <- pi.m[,2],
"ys" <- googl_y[100:length(googl_y)]
)
pM1a<-ggplot(data.plot_ada, aes(x = iter)) +
geom_line(aes(y = lo), color = "orange", linetype = "solid") +
geom_line(aes(y = up), color = "orange", linetype = "solid") +
geom_line(aes(y = ys), color = "black", linetype = "solid") +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Google stock price", color = "") +
theme_minimal()
pM1a
# hedge
hedAlg <- hedge(loss.matrix, eta = 0.01)
N <- NROW(hedAlg$weights)
K <- NCOL(hedAlg$weights)
t <- NROW(googl_lag)-N-1
pi.m <- pi.wm <- matrix(NA, N, 2)
m.cov <- rep(NA, N)
wm.cov <- rep(NA, N)
set.seed(1)
for(i in 1:N){
conf.t <- rbind(ar1$piAdapt[i,], ar2$piAdapt[i,], ar3$piAdapt[i,], ar4$piAdapt[i,], ar5$piAdapt[i,], ar6$piAdapt[i,])
maj.int <- majority_vote(conf.t, w=hedAlg$weights[i,], 0.5)
wmaj.int <- majority_vote(conf.t, w=hedAlg$weights[i,], runif(1, 0.5, 1))
pi.m[i,] <- maj.int
pi.wm[i,] <- wmaj.int
m.cov[i] <- I(maj.int[1] <= googl_y[i+t] && googl_y[i+t] <= maj.int[2])
wm.cov[i] <- I(wmaj.int[1] <= googl_y[i+t] && googl_y[i+t] <= wmaj.int[2])
if(i %% 100 == 0){
print(sprintf("Done %i time steps",i))
}
}
m.cov[is.na(m.cov)] <- F
wm.cov[is.na(wm.cov)] <- F
mean(m.cov)
mean(wm.cov)
data.plot_b <- data.frame(
iter = 1:N,
local.m = stats::filter(m.cov, rep(1/100, 100)),
local.wm = stats::filter(wm.cov, rep(1/100, 100))
)
pM2<-ggplot(data.plot_b, aes(x = iter)) +
geom_line(aes(y = local.m, color = "Weighted Majority"), linetype = "solid") +
geom_line(aes(y = local.wm, color = "Rand. Weighted Majority"), linetype = "dashed") +
geom_hline(yintercept = 0.80, color = "black", linetype = "dashed") +
labs(title = expression(eta==0.01), x = "Iter", y = "Local Level Coverage", color = "") +
scale_color_manual(values = c("Weighted Majority" = "forestgreen", "Rand. Weighted Majority" = "orange", "Bern 0.9" = "orange")) +
theme_minimal() + theme(legend.position = "bottom")+
ylim(0.5,1.01)
pM2
data.plot_hed <- data.frame(
"iter" <- 1:N,
"lo" <- pi.m[,1],
"up" <- pi.m[,2],
"ys" <- googl_y[100:length(googl_y)]
)
pM2a<-ggplot(data.plot_hed, aes(x = iter)) +
geom_line(aes(y = lo), color = "orange", linetype = "solid") +
geom_line(aes(y = up), color = "orange", linetype = "solid") +
geom_line(aes(y = ys), color = "black", linetype = "solid") +
labs(title = expression(eta==0.01), x = "Iter", y = "Google stock price", color = "") +
theme_minimal()
row1 <- grid.arrange(pM1, pM2, ncol = 2)
row2 <- grid.arrange(pM1a, pM2a, ncol = 2)
grid.arrange(row1, row2)
# weights
data.plot1 <- as.matrix(adahedAlg$weights)
colnames(data.plot1) <- c("ar1", "ar2", "ar3", "ar4", "ar5", "ar6")
data.plot1 <- as.data.frame(data.plot1)
data.plot1$iter <- 1:nrow(data.plot1)
p1<-ggplot(data.plot1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste("Adaptive ", eta)), x = "Iter", y = "Weights", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom")
p1
data.plot2 <- as.matrix(hedAlg$weights)
colnames(data.plot2) <- c("ar1", "ar2", "ar3", "ar4", "ar5", "ar6")
data.plot2 <- as.data.frame(data.plot2)
data.plot2$iter <- 1:nrow(data.plot2)
p2<-ggplot(data.plot2, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash") +
labs(title = expression(eta == 0.01), x = "Iter", y = "Weights", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(0,1)
p2
# cors
cors_ar <- matrix(NA, nrow = length(ar1$AdaptErr), ncol = 6)
for(i in 20:length(ar1$AdaptErr)){
cors_ar[i,1] <- cor(ar1$AdaptErr[1:i], adahedAlg$weights[1:i,1])
cors_ar[i,2] <- cor(ar2$AdaptErr[1:i], adahedAlg$weights[1:i,2])
cors_ar[i,3] <- cor(ar3$AdaptErr[1:i], adahedAlg$weights[1:i,3])
cors_ar[i,4] <- cor(ar4$AdaptErr[1:i], adahedAlg$weights[1:i,4])
cors_ar[i,5] <- cor(ar5$AdaptErr[1:i], adahedAlg$weights[1:i,5])
cors_ar[i,6] <- cor(ar6$AdaptErr[1:i], adahedAlg$weights[1:i,6])
}
data.cor1 <- data.frame(
ar1 = cors_ar[,1],
ar2 = cors_ar[,2],
ar3 = cors_ar[,3],
ar4 = cors_ar[,4],
ar5 = cors_ar[,5],
ar6 = cors_ar[,6],
iter = 1:NROW(cors_ar)
)
p_cor1 <- ggplot(data.cor1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste("Adaptive ",eta)), x = "Iter", y = "correlation", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(-0.3,0.3)
cors_ar <- matrix(NA, nrow = length(ar1$AdaptErr), ncol = 6)
for(i in 20:length(ar1$AdaptErr)){
cors_ar[i,1] <- cor(ar1$AdaptErr[1:i], hedAlg$weights[1:i,1])
cors_ar[i,2] <- cor(ar2$AdaptErr[1:i], hedAlg$weights[1:i,2])
cors_ar[i,3] <- cor(ar3$AdaptErr[1:i], hedAlg$weights[1:i,3])
cors_ar[i,4] <- cor(ar4$AdaptErr[1:i], hedAlg$weights[1:i,4])
cors_ar[i,5] <- cor(ar5$AdaptErr[1:i], hedAlg$weights[1:i,5])
cors_ar[i,6] <- cor(ar6$AdaptErr[1:i], hedAlg$weights[1:i,6])
}
data.cor2 <- data.frame(
ar1 = cors_ar[,1],
ar2 = cors_ar[,2],
ar3 = cors_ar[,3],
ar4 = cors_ar[,4],
ar5 = cors_ar[,5],
ar6 = cors_ar[,6],
iter = 1:NROW(cors_ar)
)
p_cor2 <- ggplot(data.cor1, aes(x = iter)) +
geom_line(aes(y = ar1, color = "AR(1)"), linetype = "solid", size = .75) +
geom_line(aes(y = ar2, color = "AR(2)"), linetype = "dashed", size = .75) +
geom_line(aes(y = ar3, color = "AR(3)"), linetype = "dotted", size = .75) +
geom_line(aes(y = ar4, color = "AR(4)"), linetype = "longdash", size = .75) +
geom_line(aes(y = ar5, color = "AR(5)"), linetype = "dotdash", size = .75) +
geom_line(aes(y = ar6, color = "AR(6)"), linetype = "twodash", size = .75) +
labs(title = expression(paste(eta==0.01)), x = "Iter", y = "correlation", color = "") +
scale_color_manual(values = c("AR(1)" = "blue", "AR(2)" = "red", "AR(3)" = "orange", "AR(4)" = "forestgreen", "AR(5)" = "pink", "AR(6)"="purple")) +
theme_minimal() + theme(legend.position = "bottom") + ylim(-0.5,0.5)
# sums of covs
sum_covs_ar <- rep(NA, length(ar1$AdaptErr))
for(i in 20:length(ar1$AdaptErr)){
sum_covs_ar[i] <- mean(ar1$AdaptErr[1:i]*adahedAlg$weights[1:i,1]) + mean(ar2$AdaptErr[1:i]*adahedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i]*adahedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i]*adahedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i]*adahedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i]*adahedAlg$weights[1:i,6]) -
(mean(ar1$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,1]) +  mean(ar2$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i])*mean(adahedAlg$weights[1:i,6]))
}
data.cov1 <- data.frame(
sum_covs = sum_covs_ar,
iter = 1:NROW(cors_ar)
)
p_cov1 <- ggplot(data.cov1, aes(x = iter)) +
geom_line(aes(y = sum_covs), linetype = "solid", size = .75) +
labs(title = expression(paste("Adaptive ",eta)), x = "Iter", y = "Sum of covariances", color = "") +
theme_minimal() + theme(legend.position = "bottom") + ylim(-1, 1)
sum_covs_ar <- rep(NA, length(ar1$AdaptErr))
for(i in 20:length(ar1$AdaptErr)){
sum_covs_ar[i] <- mean(ar1$AdaptErr[1:i]*hedAlg$weights[1:i,1]) + mean(ar2$AdaptErr[1:i]*hedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i]*hedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i]*hedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i]*hedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i]*hedAlg$weights[1:i,6]) -
(mean(ar1$AdaptErr[1:i])*mean(hedAlg$weights[1:i,1]) +  mean(ar2$AdaptErr[1:i])*mean(hedAlg$weights[1:i,2]) + mean(ar3$AdaptErr[1:i])*mean(hedAlg$weights[1:i,3]) + mean(ar4$AdaptErr[1:i])*mean(hedAlg$weights[1:i,4]) + mean(ar5$AdaptErr[1:i])*mean(hedAlg$weights[1:i,5]) + mean(ar6$AdaptErr[1:i])*mean(hedAlg$weights[1:i,6]))
}
data.cov2 <- data.frame(
sum_covs = sum_covs_ar,
iter = 1:NROW(cors_ar)
)
p_cov2 <- ggplot(data.cov2, aes(x = iter)) +
geom_line(aes(y = sum_covs), linetype = "solid", size = .75) +
labs(title = expression(eta==0.01), x = "Iter", y = "Sum of covariances", color = "") +
theme_minimal() + theme(legend.position = "bottom") + ylim(-1, 1)
row1 <- grid.arrange(pM1, p1, p_cov1, pM1a, ncol = 4)
row2 <- grid.arrange(pM2, p2, p_cov2, pM2a, ncol = 4)
grid.arrange(row1, row2)
